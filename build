#!/bin/bash

export DOLLAR='$'
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done

export DEPLOY_ROOT_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

source "$DEPLOY_ROOT_DIR/src/common.bash"

if [ "x$1" != "x" ]; then
  export DOCKERFILE=$1
else
  export DOCKERFILE=Dockerfile
fi

# If BUILDARGS_FROM exists, change SECRET/STAGE_ prefixes to BUILDARG_ for later consumption
buildargs_from

# Set buildargs
set_buildargs

if [[ -n "$CI_REGISTRY_USER" ]]; then
	echo "Logging to GitLab Container Registry with CI credentials..."
	docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
	echo ""
fi

echo "Building application..."

if [ "x$1" != "x" ]; then
	echo "Building Dockerfile-based application using the Dockerfile at $1"
    # Look for KDH_INSERT_ARGS and edit Dockerfile
    insert_args
	export SHORT=$(echo "$1" | cut -d'-' -f2-)
	if [ "x$KDH_SKIP_LATEST" == "xtrue" ]; then
		echo "KDH_SKIP_LATEST is true, not building from latest"
		dockerbuild="docker build -t \"$CI_REGISTRY_IMAGE:$SHORT-$CI_REGISTRY_TAG\" $buildargs -f $1 ."
		eval $dockerbuild
	else
		docker pull $CI_REGISTRY_IMAGE:$SHORT-latest || true
		dockerbuild="docker build --cache-from \"$CI_REGISTRY_IMAGE:$SHORT-latest\" -t \"$CI_REGISTRY_IMAGE:$SHORT-$CI_REGISTRY_TAG\" $buildargs -f $1 ."
		eval $dockerbuild
	fi
	echo "Pushing to GitLab Container Registry..."
	docker push "$CI_REGISTRY_IMAGE:$SHORT-$CI_REGISTRY_TAG"

elif [[ -f Dockerfile ]]; then
	echo "Building Dockerfile-based application..."
    # Look for KDH_INSERT_ARGS and edit Dockerfile
    insert_args
	if [ "x$KDH_SKIP_LATEST" == "xtrue" ]; then
		echo "KDH_SKIP_LATEST is true, not building from latest"
		dockerbuild="docker build -t \"$CI_REGISTRY_IMAGE:$CI_REGISTRY_TAG\" $buildargs ."
		eval $dockerbuild
	else
		docker pull $CI_REGISTRY_IMAGE:latest || true
		dockerbuild="docker build --cache-from \"$CI_REGISTRY_IMAGE:latest\" -t \"$CI_REGISTRY_IMAGE:$CI_REGISTRY_TAG\" $buildargs ."
		eval $dockerbuild
	fi
	echo "Pushing to GitLab Container Registry..."
	docker push "$CI_REGISTRY_IMAGE:$CI_REGISTRY_TAG"
else
    export DOCKER_HOST='tcp://docker:2375'
	echo "No Dockerfile at root of repo. Using herokuish build packs."
    echo "Building envpack string"
    set_env_buildpack
    echo "Starting herokuish"
    dockerrun="docker run -i $buildenv --name=\"$CI_CONTAINER_NAME\" -v \"$(pwd):/tmp/app:ro\" gliderlabs/herokuish /bin/herokuish buildpack build"
	eval $dockerrun
    docker commit "$CI_CONTAINER_NAME" "$CI_REGISTRY_IMAGE:$CI_REGISTRY_TAG"
	docker rm "$CI_CONTAINER_NAME"
	echo "Configuring $CI_REGISTRY_IMAGE:$CI_REGISTRY_TAG docker image..."
    docker create --expose 5000 --env PORT=5000 --name="$CI_CONTAINER_NAME" "$CI_REGISTRY_IMAGE:$CI_REGISTRY_TAG" /bin/herokuish procfile start web
    docker commit "$CI_CONTAINER_NAME" "$CI_REGISTRY_IMAGE:$CI_REGISTRY_TAG"
    docker rm "$CI_CONTAINER_NAME" >/dev/null

    echo "Pushing to GitLab Container Registry"
    docker push "$CI_REGISTRY_IMAGE:$CI_REGISTRY_TAG"
fi
